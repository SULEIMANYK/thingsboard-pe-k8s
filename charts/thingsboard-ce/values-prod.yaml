# Production configuration for ThingsBoard Community Edition
# This configuration is suitable for production deployment with microservices architecture

global:
  deploymentMode: "microservices"
  oracle:
    enabled: true
    storageClass: "oci-bv"
    loadBalancer:
      enabled: true
      shape: "flexible"
      minBandwidth: "10"
      maxBandwidth: "100"

# Core microservice configuration
microservices:
  core:
    replicaCount: 2
    loadDemo: false
    resources:
      requests:
        cpu: "2"
        memory: "4Gi"
      limits:
        cpu: "4"
        memory: "8Gi"

# Transport services configuration
transports:
  mqtt:
    enabled: true
    replicaCount: 2
    image:
      repository: "thingsboard/tb-mqtt-transport"
      tag: "4.2.0"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1"
        memory: "2Gi"
    service:
      type: "LoadBalancer"
      port: 1883
      annotations:
        service.beta.kubernetes.io/oci-load-balancer-protocol: "TCP"
        service.beta.kubernetes.io/oci-load-balancer-load-balancing-policy: "ROUND_ROBIN"

  http:
    enabled: true
    replicaCount: 2
    image:
      repository: "thingsboard/tb-http-transport"
      tag: "4.2.0"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1"
        memory: "2Gi"
    service:
      type: "LoadBalancer"
      port: 8081
      annotations:
        service.beta.kubernetes.io/oci-load-balancer-protocol: "HTTP"

  coap:
    enabled: false  # Disable CoAP for production

# Queue configuration with Kafka
queue:
  type: "kafka"
  kafka:
    servers: "kafka.kafka.svc.cluster.local:9092"
    host: "kafka.kafka.svc.cluster.local"
    port: 9092

# Cache configuration with Redis
cache:
  redis:
    enabled: true
    host: "redis.redis.svc.cluster.local"
    port: 6379
    password: ""  # Use existing secret

# Database configuration
database:
  type: "postgresql"
  host: "postgres.database.svc.cluster.local"
  port: 5432
  name: "thingsboard"
  username: "thingsboard"
  password: ""  # Use existing secret
  existingSecret: "thingsboard-db-secret"

# Production persistence
persistence:
  enabled: true
  size: "100Gi"
  storageClass: "oci-bv"

# Load balancer service for main HTTP interface
service:
  type: "LoadBalancer"
  httpPort: 8080
  annotations:
    service.beta.kubernetes.io/oci-load-balancer-protocol: "HTTP"
    service.beta.kubernetes.io/oci-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/oci-load-balancer-tls-secret: "thingsboard-tls"

# Security context
securityContext:
  runAsUser: 999
  runAsNonRoot: true
  fsGroup: 999

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# High availability settings
affinity:
  podAntiAffinity:
    enabled: true
    requiredDuringSchedulingIgnoredDuringExecution: true
    topologyKey: "topology.kubernetes.io/zone"
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: "node.kubernetes.io/instance-type"
          operator: In
          values:
          - "VM.Standard.E4.Flex"
          - "VM.Standard3.Flex"

# Node selector for production nodes
nodeSelector:
  node.kubernetes.io/environment: "production"

# Tolerations for dedicated nodes
tolerations:
  - key: "thingsboard"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Production health checks
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 60
  timeoutSeconds: 30
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 15
  failureThreshold: 3

# Production logging
env:
  - name: LOGGING_LEVEL_ROOT
    value: "WARN"
  - name: LOGGING_LEVEL_ORG_THINGSBOARD
    value: "INFO"
  - name: TB_SERVICE_TYPE
    value: "monolith"
  - name: JAVA_OPTS
    value: "-Xms2g -Xmx4g -XX:+UseG1GC"

# Image configuration
image:
  repository: "thingsboard/tb-postgres"
  tag: "4.2.0"
  pullPolicy: "Always"

# Service account
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/thingsboard-role"

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: "monitoring"
    - from:
      - namespaceSelector:
          matchLabels:
            name: "ingress-nginx"

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    labels:
      prometheus: "kube-prometheus"
